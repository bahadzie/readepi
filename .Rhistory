file <- system.file("extdata", "test.json", package = "readepi")
data <- readepi(file.path = file)
View(data)
file <- system.file("extdata", "test.xlsx", package = "readepi")
data <- readepi(file.path = file, which = "Sheet2")
View(data)
head(data)
data <- rio::import(file.path, format = format, which = "Sheet2")
data <- rio::import(file, format = format, which = "Sheet2")
data <- rio::import(file, which = "Sheet2")
library(readepi)
file <- system.file("extdata", "test.xlsx", package = "readepi")
data <- readepi(file.path = file, which = "Sheet2")
View(data)
file <- system.file("extdata", "test.xlsx", package = "readepi")
data <- readepi(file.path = file, which = c("Sheet2","Sheet1"))
toupper("reading all files in the given directory")
toupper("reading only txt files")
dir.path <- "inst/extdata"
data <- readepi(file.path = dir.path, pattern = ".txt")
View(data)
data <- readepi(file.path = dir.path)
View(data)
list.files(file.path, full.names = TRUE, recursive = FALSE)
file="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages/On_trace_github/readepi/inst/extdata/fake_test.ini"
system(sprintf("sed -rn '1s/..(.).*/\1/p' %s",file))
system(sprintf("sed -rn '1s/\w*(.).*/\1/p' %s",file))
readLines(con = file, n = 1)
readr::guess_parser("user_name\tpassword\thost_name\tproject_id\tcomment\tdbms\tport")
library(rio)
install_formats()
??rio
devtools::load_all(".")
x=file
x
ext = getExtension(x)
ext
bn = gsub(paste0('.',ext),'',basename(x))
bn
files=list.files(file.path, full.names = TRUE, recursive = FALSE)
files.extensions = as.character(lapply(files, getExtension))
files
files=list.files(file.path, full.names = TRUE, recursive = FALSE,include.dirs = FALSE)
files
files=list.files(file.path, full.names = TRUE, recursive = FALSE,include.dirs = FALSE)
files
files=list.files(file.path, full.names = TRUE, recursive = TRUE,include.dirs = FALSE)
files
files=list.files(file.path, full.names = TRUE, recursive = FALSE,include.dirs = TRUE)
files
file.path
list.files(file.path)
list.files(file.path, include.dirs = FALSE)
list.dirs(file.path)
list.dirs(file.path, recursive = FALSE)
dirs=list.dirs(file.path, recursive = FALSE)
idx = which(files %in% dirs)
files = files[-idx]
files
rio.extensions = c('csv','psv','tsv','csvy','sas7bdat','sav','zsav','dta','xpt',
'por','xls','R','RData','rda','rds','rec','mtp','syd','dbf',
'arff','dif','no recognized extension','fwf','csv.gz','parquet',
'wf1','feather','fst','json','mat','ods','html','xml','yml')
files.extensions = as.character(lapply(files, getExtension))
files.extensions
files.base.names = as.character(lapply(files, get_base_name))
files.base.names
idx = which(files.extensions %in% rio.extensions)
idx
tmp.files = files[idx]
tmp.bn = files.base.names[idx]
tmp.files
tmp.bn
for(file in tmp.files){
i=1
data <- rio::import(file, format = format, which = which)
result[[tmp.bn[i]]] = data
i=i+1
}
tmp.files
format=NULL; which=NULL
for(file in tmp.files){
i=1
data <- rio::import(file, format = format, which = which)
result[[tmp.bn[i]]] = data
i=i+1
}
result = list()
for(file in tmp.files){
i=1
data <- rio::import(file) #, format = format, which = which
result[[tmp.bn[i]]] = data
i=i+1
}
View(result)
result = list()
for(file in tmp.files){
i=1
data <- rio::import(file, format = format, which = which) #, format = format, which = which
result[[tmp.bn[i]]] = data
i=i+1
}
other.file.types = files[-idx]
other.file.bn = files.base.names[-idx]
other.file.types
other.file.bn
for(file in tmp.files){
i=1
data <- rio::import(file) #, format = format, which = which
result[[tmp.bn[i]]] = data
i=i+1
}
View(result)
files = files[-idx]
files.base.names = files.base.names[-idx]
files
file = files[1]
tmp.string = readLines(con = file, n=1)
tmp.string
system(sprintf("awk '{$1=$1} 1' %s",file))
tmp.string = readLines(con = file, n=1)
tmp.string
grepl("\t",tmp.string)
devtools::load_all(".")
sep = detect_separator(tmp.string)
sep
sep = detect_separator(tmp.string)
sep
grepl("|",tmp.string)
strsplit(tmp.string,"|")
grepl("|","karim")
unique(sep)=="|"
unique(c('|','|')=='|')
devtools::load_all(".")
sep = detect_separator(tmp.string)
sep
sep = sep[-'|']
sep = sep[-(which(sep=='|'))]
sep
tmp.string
tmp.string="user name\tpassword\thost_name\tproject_id\tcomment\tdbms\tport"
sep = detect_separator(tmp.string)
sep
if(length(sep)==1 & sep=='|'){
sep="|"
}else{
sep = sep[-(which(sep=='|'))]
}
if(length(sep)==1 && sep=='|'){
sep="|"
}else{
sep = sep[-(which(sep=='|'))]
}
sep
if(length(sep)==2 && ' ' %in% sep){
sep = sep[-(which(sep==' '))]
}else{
R.utils::cat("Can't resolve separator in",file)
next
}
sep
devtools::load_all(".")
file.path
files = list.files(file.path, full.names = TRUE, pattern = pat,
recursive = FALSE)
files = list.files(file.path, full.names = TRUE, recursive = FALSE)
dirs = list.dirs(file.path, full.names = TRUE, recursive = FALSE)
result = read_multiple_files(files, dirs)
files = list.files(file.path, full.names = TRUE, recursive = FALSE)
dirs = list.dirs(file.path, full.names = TRUE, recursive = FALSE)
files
idx = which(files %in% dirs)
if(length(idx)>0){
files = files[-idx]
}
files
files.extensions = as.character(lapply(files, getExtension))
files.base.names = as.character(lapply(files, get_base_name))
idx = which(files.extensions %in% rio.extensions)
idx
result = list()
if(length(idx)>0){
tmp.files = files[idx]
tmp.bn = files.base.names[idx]
i=1
for(file in tmp.files){
data <- rio::import(file) #, format = format, which = which
result[[tmp.bn[i]]] = data
i=i+1
}
files = files[-idx]
files.base.names = files.base.names[-idx]
}
files
i=1
file = files[1]
tmp.string = readLines(con = file, n=1)
sep = detect_separator(tmp.string)
sep
if(length(sep)==1 && sep=='|'){
sep="|"
}else{
sep = sep[-(which(sep=='|'))]
if(length(sep)==2 && ' ' %in% sep){
sep = sep[-(which(sep==' '))]
}else{
R.utils::cat("\nCan't resolve separator in",file,"\n")
i=i+1
next
}
}
sep
tmp.string = readLines(con = file, n=1)
sep = detect_separator(tmp.string)
if(length(sep)==1 && sep=='|'){
sep="|"
}else{
sep = sep[-(which(sep=='|'))]
if(length(sep)==2 && ' ' %in% sep){
sep = sep[-(which(sep==' '))]
if(length(sep)>1){
R.utils::cat("\nCan't resolve separator in",file,"\n")
i=i+1
next
}
}
}
sep
files.extensions = as.character(lapply(files, getExtension))
files.base.names = as.character(lapply(files, get_base_name))
# reading files with extensions that are taken care by rio
idx = which(files.extensions %in% rio.extensions)
result = list()
if(length(idx)>0){
tmp.files = files[idx]
tmp.bn = files.base.names[idx]
i=1
for(file in tmp.files){
data <- rio::import(file) #, format = format, which = which
result[[tmp.bn[i]]] = data
i=i+1
}
files = files[-idx]
files.base.names = files.base.names[-idx]
files.extensions = files.extensions[-idx]
}
i
i=1
tmp.string = readLines(con = file, n=1)
sep = detect_separator(tmp.string)
if(length(sep)==1 && sep=='|'){
sep="|"
}else{
sep = sep[-(which(sep=='|'))]
if(length(sep)==2 && ' ' %in% sep){
sep = sep[-(which(sep==' '))]
if(length(sep)>1){
R.utils::cat("\nCan't resolve separator in",file,"\n")
i=i+1
next
}
}
}
sep
files.extensions
i
tmp.string = readLines(con = file, n=1)
sep = detect_separator(tmp.string)
if(length(sep)==1 && sep=='|'){
sep="|"
}else{
sep = sep[-(which(sep=='|'))]
if(length(sep)==2 && ' ' %in% sep){
sep = sep[-(which(sep==' '))]
if(length(sep)>1){
R.utils::cat("\nCan't resolve separator in",file,"\n")
i=i+1
next
}
}
}
data <- data.table::fread(file, sep = sep, nThread = 4)
data
devtools::load_all(".")
files = list.files(file.path, full.names = TRUE, recursive = FALSE)
dirs = list.dirs(file.path, full.names = TRUE, recursive = FALSE)
result = read_multiple_files(files, dirs)
View(result)
pattern=".txt"
result = list()
for(pat in pattern){
files = list.files(file.path, full.names = TRUE, pattern = pat,
recursive = FALSE)
dirs = list.dirs(file.path, full.names = TRUE, recursive = FALSE)
res = read_multiple_files(files, dirs)
# data <- rio::import_list(list.files(file.path, full.names = TRUE, pattern = pat,
#                                     recursive = FALSE))
result = c(result, res)
}
View(result)
files
library(readepi)
data <- readepi(file.path = dir.path, pattern = ".txt")
View(data)
dir.path <- "inst/extdata"
data <- readepi(file.path = dir.path)
View(data)
data <- readepi(file.path = dir.path, pattern = c(".txt",".xlsx"))
usethis::use_test(read_from_file())
usethis::use_test("read_from_file")
devtools::load_all(".")
library(readepi)
data <- readepi(file.path = dir.path, pattern = c(".txt",".xlsx"))
library(readepi)
data <- readepi(file.path = dir.path, pattern = c(".txt",".xlsx"))
devtools::load_all(".")
library(readepi)
data <- readepi(file.path = dir.path, pattern = c(".txt",".xlsx"))
View(data)
toupper("display the structure of the credentials file")
toupper("reading all fields and records the project")
toupper("reading specified fields and all records from the project")
toupper("reading specified records and all fields from the project")
toupper("reading specified records and fields from the project")
toupper("reading all fields and all records from one table (`dss_events`)")
toupper("reading specified fields and all records from one table")
toupper("reading specified records and all fields from one table")
toupper("reading specified fields and records one the table")
toupper("reading data from several tables")
toupper("and subsetting fields across tables")
toupper("reading data from several tables and subsetting records across tables")
toupper("reading data from several tables and subsetting records and fields across tables")
show_example_file()
credentials.file <- system.file("extdata", "test.ini", package = "readepi")
credentials.file
data <- readepi(credentials.file, project.id = "Pats__Covid_19_Cohort_1_Screening")
project.data <- data$data
project.metadeta <- data$metadata
fields <- c("day_1_q_ran_id", "redcap_event_name", "day_1_q_1a", "day_1_q_1b", "day_1_q_1c", "day_1_q_1", "day_1_q_2", "day_1_q_3", "day_1_q_4", "day_1_q_5")
data <- readepi(credentials.file, project.id = "Pats__Covid_19_Cohort_1_Screening",
fields = fields)
records <- c("C10001/3", "C10002/1", "C10003/7", "C10004/5", "C10005/9", "C10006/8", "C10007/6", "C10008/4", "C10009/2", "C10010/1")
data <- readepi(credentials.file, project.id = "Pats__Covid_19_Cohort_1_Screening",
records = records)
data <- readepi(credentials.file, project.id = "Pats__Covid_19_Cohort_1_Screening",
records = records,
fields = fields
)
project.data <- data$data
project.metadeta <- data$metadata
?dplyr::rename
show_example_file()
library(readepi)
version
library(readepi)
devtools::build_readme()
devtools::build_vignettes()
library(readepi)
devtools::install_github("epiverse-trace/readepi", build_vignettes = TRUE)
devtools::dev_sitrep()
devtools::install_dev_deps('odbc')
install.packages("odbc")
devtools::dev_sitrep()
?styler::style_pkg
styler::style_pkg(".")
devtools::load_all(".")
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
library(readepi)
odbc::odbcListDrivers()
library(odbc)
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbcListDrivers()
library(odbc)
odbcListDrivers()
library(odbc)
odbcListDrivers()
odbcListDrivers()
?stopifnot
stopifnot(file.exists(credentials.file))
credentials.file = system.file("extdata", "fake_test.ini", package = "readepi")
stopifnot(file.exists(credentials.file))
?styler
??styler
?show_example_file
library(readepi)
?show_example_file
?show_tables
devtools::load_all(".")
covr::package_coverage()
devtools::load_all(".")
library(readepi)
devtools::build_readme()
data <- readepi(
credentials.file = credentials.file,
project.id = "IBS_BHDSS",  #this is the database name
driver.name = "ODBC Driver 17 for SQL Server",
table.name = "dss_events"
)
credentials.file <- system.file("extdata", "test.ini", package = "readepi")
data <- readepi(
credentials.file = credentials.file,
project.id = "IBS_BHDSS",  #this is the database name
driver.name = "ODBC Driver 17 for SQL Server",
table.name = "dss_events"
)
devtools::load_all(".")
library(readepi)
devtools::load_all(".")
devtools::load_all(".")
target.driver
target.driver=17
covr::package_coverage()
devtools::load_all(".")
devtools::load_all(".")
covr::package_coverage()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
covr::package_coverage()
library(readepi)
data <- readepi(
credentials.file = credentials.file,
project.id = "IBS_BHDSS",  #this is the database name
driver.name = "ODBC Driver 17 for SQL Server",
table.name = "dss_events"
)
credentials.file
data <- readepi(
credentials.file = credentials.file,
project.id = "IBS_BHDSS",  #this is the database name
driver.name = "ODBC Driver 17 for SQL Server",
table.name = "dss_events"
)
odbc::odbcListDrivers()
show_tables(
credentials.file = credentials.file,
project.id = "IBS_BHDSS",
driver.name = "ODBC Driver 17 for SQL Server"
)
con <- DBI::dbConnect(odbc::odbc(),
driver = "ODBC Driver 17 for SQL Server",
server = "robin.mrc.gm",
database = "IBD_BHDSS",
uid = "kmane",
pwd = "Dakabantang@KD23",
port = 1433
)
con <- DBI::dbConnect(odbc::odbc(),
driver = "ODBC Driver 17 for SQL Server",
server = "robin.mrc.gm",
database = "IBD_BHDSS",
uid = "kmane",
pwd = "Dakabantang@KD23",
port = 1433
)
con <- DBI::dbConnect(odbc::odbc(),
driver = "ODBC Driver 17 for SQL Server",
server = "robin.mrc.gm",
database = "IBD_BHDSS",
uid = "kmane",
pwd = "Dakabantang@KD23",
port = 1433
)
rm(list = ls())
library(readepi)
devtools::load_all(".")
credentials.file <- system.file("extdata", "test.ini", package = "readepi")
show_tables(
credentials.file = credentials.file,
project.id = "IBS_BHDSS",
driver.name = "ODBC Driver 17 for SQL Server"
)
data <- readepi(
credentials.file = credentials.file,
project.id = "Pats__Covid_19_Cohort_1_Screening"
)
install.packages("pak")
install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))
show_tables(
credentials.file = credentials.file,
project.id = "CSD_OPD",
driver.name = "ODBC Driver 17 for SQL Server"
)
show_tables(
credentials.file = credentials.file,
project.id = "CS_OPD",
driver.name = "ODBC Driver 17 for SQL Server"
)
show_tables(
credentials.file = credentials.file,
project.id = "CS_OPD",
driver.name = "ODBC Driver 17 for SQL Server",
)
project.id = "CS_OPD"
credentials$host
credentials <- read_credentials(credentials.file, project.id)
credentials
con <- DBI::dbConnect(odbc::odbc(),
driver = "ODBC Driver 17 for SQL Server",
server = credentials$host,
database = credentials$project,
uid = credentials$user,
pwd = credentials$pwd,
port = credentials$port
)
