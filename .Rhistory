devtools::build_vignettes()
library(readepi)
browseVignettes("readepi")
devtools::install_github("epiverse-trace/readepi", build_vignettes = TRUE)
library(readepi)
browseVignettes("readepi")
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
library(readepi)
devtools::build_readme()
library(readepi)
?showTables
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
library(readepi)
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
library(readepi)
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
browseVignettes("readepi")
library(data.table)
View(fread)
library(readepi)
devtools::build_readme()
devtools::load_all(".")
rm(list = c("subsetFields"))
devtools::load_all(".")
devtools::build_readme()
library(readepi)
?readepi::showTables
library(readepi)
?showTables
devtools::build_readme()
require("rio")
require("data.table")
require("dplyr")
require("kableExtra")
gambia.data="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/nextclade/burkina/nextclade_burkina.tsv"
burkina.data="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/nextclade/gambia/nextclade_gambia.tsv"
gambia.covid = fread(gambia.data)
burkina.covid = fread(burkina.data)
burkina.covid = burkina.covid %>% dplyr::select(c(seqName, clade, Nextclade_pango, clade_who, qc.overallStatus))
burkina.covid$country = "Burkina"
removePreffix = function(x){gsub("hCoV-19/BurkinaFaso/","",x)}
getYear = function(x){unlist(strsplit(x,"/"))[2]}
getsampleID = function(x){unlist(strsplit(x,"/"))[1]}
burkina.covid$seqName = as.character(lapply(burkina.covid$seqName, removePreffix))
burkina.covid$year = as.character(lapply(burkina.covid$seqName, getYear))
burkina.covid$seqName = as.character(lapply(burkina.covid$seqName, getsampleID))
gambia.covid = gambia.covid %>% dplyr::select(c(seqName, clade, Nextclade_pango, clade_who, qc.overallStatus))
gambia.covid$country = "Gambia"
removePreffix = function(x){gsub("/nfsscratch/Karim/LSHTM/test/","",x)}
removePreffix2 = function(x){unlist(strsplit(x,"/"))[1]}
removeSuffix = function(x){gsub("/ARTIC/medaka MN908947.3", "", x)}
gambia.covid$seqName = lapply(gambia.covid$seqName, removeSuffix)
gambia.covid$seqName = lapply(gambia.covid$seqName, removePreffix)
gambia.covid$seqName = lapply(gambia.covid$seqName, removePreffix2)
gambia.covid$year = "2021"
View(burkina.covid)
burkina.data="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/nextclade/burkina/nextclade_burkina.tsv"
gambia.data="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/nextclade/gambia/nextclade_gambia.tsv"
gambia.covid = fread(gambia.data)
burkina.covid = fread(burkina.data)
View(gambia.covid)
gambia.covid = gambia.covid %>% dplyr::select(c(seqName, clade, Nextclade_pango, clade_who, qc.overallStatus))
gambia.covid$country = "Gambia"
removePreffix = function(x){gsub("/nfsscratch/Karim/LSHTM/test/","",x)}
removePreffix2 = function(x){unlist(strsplit(x,"/"))[1]}
removeSuffix = function(x){gsub("/ARTIC/medaka MN908947.3", "", x)}
gambia.covid$seqName = lapply(gambia.covid$seqName, removeSuffix)
gambia.covid$seqName = lapply(gambia.covid$seqName, removePreffix)
gambia.covid$seqName = lapply(gambia.covid$seqName, removePreffix2)
gambia.covid$year = "2021"
burkina.covid = burkina.covid %>% dplyr::select(c(seqName, clade, Nextclade_pango, clade_who, qc.overallStatus))
burkina.covid$country = "Burkina"
removePreffix = function(x){gsub("hCoV-19/BurkinaFaso/","",x)}
getYear = function(x){unlist(strsplit(x,"/"))[2]}
getsampleID = function(x){unlist(strsplit(x,"/"))[1]}
burkina.covid$seqName = as.character(lapply(burkina.covid$seqName, removePreffix))
burkina.covid$year = as.character(lapply(burkina.covid$seqName, getYear))
burkina.covid$seqName = as.character(lapply(burkina.covid$seqName, getsampleID))
View(burkina.covid)
library(knitr)
require("kableExtra")
kable(table(burkina.covid$year), format = "html")
table(burkina.covid$year)
install.packages("Biostrings")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
browseVignettes("Biostrings")
require("Biostrings")
gambia.fasta = Biostrings::readDNAStringSet("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/gambia_consensus.fasta")
names(gambia.fasta)
View(gambia.fasta)
removePreffix = function(x){gsub("/nfsscratch/Karim/LSHTM/test/","",x)}
removePreffix2 = function(x){unlist(strsplit(x,"/"))[1]}
removeSuffix = function(x){gsub("/ARTIC/medaka MN908947.3", "", x)}
seq.name = as.character(lapply(seq.name, removeSuffix))
seq.name = names(gambia.fasta)
seq.name = as.character(lapply(seq.name, removeSuffix))
seq.name = as.character(lapply(seq.name, removePreffix))
seq.name = as.character(lapply(seq.name, removePreffix2))
seq.name
sequence = paste(gambia.fasta)
df = data.frame(seq_name, sequence)
df = data.frame(seq.name, sequence)
View(df)
magrittr::str_count(df$sequence[1], pattern = "N")
?str_count
stringr::str_count(df$sequence[1], pattern = "N")
View(df)
not.processed.samples = df %>% dplyr::filter(seq.name %in% c("barcode11","barcode18","barcode21"))
not.processed.samples$`%missingBP` = NA
for(i in 1:nrow(not.processed.samples)){
not.processed.samples$`%missingBP`[i] = ((stringr::str_count(df$sequence[i], pattern = "N"))/nchar(df$sequence[i]))*100
}
View(not.processed.samples)
((stringr::str_count(df$sequence[2], pattern = "N"))/nchar(df$sequence[2]))*100
(stringr::str_count(df$sequence[2], pattern = "N")
)
nchar(df$sequence[2])
df$sequence[2]
df$sequence[3]
gambia.fasta = Biostrings::readDNAStringSet("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/gambia_consensus_copie.fasta")
seq.name = names(gambia.fasta)
seq.name = as.character(lapply(seq.name, removeSuffix))
seq.name = as.character(lapply(seq.name, removePreffix))
seq.name = as.character(lapply(seq.name, removePreffix2))
View(gambia.fasta)
sequence = paste(gambia.fasta)
df = data.frame(seq.name, sequence)
not.processed.samples = df %>% dplyr::filter(seq.name %in% c("barcode11","barcode18","barcode21"))
not.processed.samples$`%missingBP` = NA
for(i in 1:nrow(not.processed.samples)){
not.processed.samples$`%missingBP`[i] = ((stringr::str_count(df$sequence[i], pattern = "N"))/nchar(df$sequence[i]))*100
}
df$sequence[8]
not.processed.samples = df %>% dplyr::filter(seq.name %in% c("barcode11","barcode18","barcode21"))
not.processed.samples$`%missingBP` = NA
for(i in 1:nrow(not.processed.samples)){
not.processed.samples$`%missingBP`[i] = ((stringr::str_count(not.processed.samples$sequence[i], pattern = "N"))/nchar(not.processed.samples$sequence[i]))*100
}
not.processed.samples = not.processed.samples %>% dplyr::select(c(seq.name,`%missingBP`))
kable(not.processed.samples, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
kable(table(burkina.covid$year), "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
kable(table(burkina.covid$clade), "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
the.table = data.frame(table(burkina.covid$clade))
the.table
the.table = data.frame(table(burkina.covid$clade)) %>% dplyr::rename(Var1=variant, Freq=num) %>% dplyr::mutate(prop=num/44)
the.table = data.frame(table(burkina.covid$clade)) %>% dplyr::rename(variant=Var1, num=Freq) %>% dplyr::mutate(prop=num/44)
the.table
the.table = data.frame(table(burkina.covid$clade)) %>% dplyr::rename(variant=Var1, num=Freq) %>% dplyr::mutate(prop=(num/44)*100)
kable(the.table, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
voc = burkina.covid %>% dplyr::filter(clade_who != "unassigned")
kable(voc, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
the.table = data.frame(table(burkina.covid$clade, burkina.covid$year)) %>% dplyr::rename(variant=Var1, num=Freq)
the.table
the.table = data.frame(table(burkina.covid$clade, burkina.covid$year)) %>% dplyr::rename(variant=Var1, num=Freq, year=Var2)
the.table
ggplot(the.table, aes(x=year, y=num, fill=variant)) +
geom_bar(position="dodge", stat="identity")
the.table = data.frame(table(gambia.covid$clade)) %>% dplyr::rename(variant=Var1, num=Freq) %>% dplyr::mutate(prop=(num/44)*100)
kable(the.table, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
the.table = data.frame(table(gambia.covid$clade)) %>% dplyr::rename(variant=Var1, num=Freq) %>% dplyr::mutate(prop=(num/16)*100)
kable(the.table, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
voc = gambia.covid %>% dplyr::filter(clade_who != "unassigned")
kable(voc, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
voc = gambia.covid %>% dplyr::filter(clade_who != "unassigned" | clade_who != "")
kable(voc, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
voc = gambia.covid %>% dplyr::filter(clade_who != "unassigned" & clade_who != "")
kable(voc, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
of.interest = df %>% dplyr::filter(seq.name=="barcode23")
of.interest$`%missingBP` = of.interest %>% ((stringr::str_count(of.interest$sequence, pattern = "N"))/nchar(of.interest$sequence))*100
of.interest$`%missingBP`[1] = of.interest %>% ((stringr::str_count(of.interest$sequence[1], pattern = "N"))/nchar(of.interest$sequence[1]))*100
of.interest = of.interest %>% mutate(`%missingBP`=((stringr::str_count(of.interest$sequence, pattern = "N"))/nchar(of.interest$sequence))*100)
View(of.interest)
of.interest = df %>% dplyr::filter(seq.name=="barcode23")
of.interest = of.interest %>% mutate(`%missingBP`=((stringr::str_count(of.interest$sequence, pattern = "N"))/nchar(of.interest$sequence))*100) %>% dplyr::select(c(seq.name, `%missingBP`))
kable(of.interest, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
system("uname -a", intern = TRUE)
install.packages("doParallel")
install.packages("parallelly")
library(parallel)
library(doParallel)
??parallel
?makeCluster
input.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/Covadis"
assembly.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/genome_assembly"
consensus.fasta.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/consensu_dir"
num.samples=16
partition=NUL
partition=NULL
if(!dir.exists(input.dir)){
stop(input.dir," not found!")
}
system(sprintf("mkdir -p %s %s", assembly.dir, consensus.fasta.dir))
if(!is.numeric(num.samples)){
stop("The value for the num.samples argument should be type numeric.")
}
system(sprintf("source activate artic-ncov2019"))
sample.dirs = list.dirs(input.dir, recursive = FALSE, full.names = TRUE)
system(sprintf("mamba activate artic-ncov2019"))
system(sprintf("mamba env list"))
getwd()
setwd("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data")
system(sprintf("mamba env list"))
system(sprintf("mamba env list"))
system(sprintf("mamba env list"))
input.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/Covadis"
assembly.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/genome_assembly"
consensus.fasta.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/consensu_dir"
num.samples=16
partition=NUL
input.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/Covadis"
assembly.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/genome_assembly"
consensus.fasta.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/consensu_dir"
num.samples=16
partition=NULL
system(sprintf("mamba env list"))
setwd("/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Packages/On_trace_github/readepi")
system(sprintf("mamba env list"))
# argument1: sample id
# argument2: input files dir
# argument3: genome assembly dir
input.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/Covadis"
assembly.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/genome_assembly"
consensus.fasta.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/consensu_dir"
num.samples=16
partition=NULL
library(doParallel)
library(parallel)
cores = parallel::detectCores()-1
i=1
sample.id = basename(sample.dirs[i])
sample.dirs = list.dirs(input.dir, recursive = FALSE, full.names = TRUE)
sample.dirs
sample.id = basename(sample.dirs[i])
tmp.dir = paste0(input.dir,"/",sample.id)
tmp.out.file = paste0(tmp.dir,"/",sample.id,"_guppyplex_fastq_pass.fastq")
num.threads=2
system(sprintf("./genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("./genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
getwd()
system(sprintf("conda activate artic-ncov2019"))
system(sprintf("./genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("./genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
sample.dirs[i]
assembly.dir
system(sprintf("mkdir -p %s %s", assembly.dir, consensus.fasta.dir))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
system(sprintf("zsh -i genome_assembly.sh %s %s %s %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads))
medaka.model = "r941_min_fast_g303"
system(sprintf("zsh -i genome_assembly.sh %s %s %s %d %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads,
medaka.model))
system(sprintf("zsh ./genome_assembly.sh %s %s %s %d %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads,
medaka.model))
cl = parallel::makeCluster(cores)
doParallel::registerDoParallel(cl)
num.threads=2
foreach::foreach(i=1:length(sample.dirs)) %dopar%{
sample.id = basename(sample.dirs[i])
# tmp.dir = paste0(input.dir,"/",sample.id)
# tmp.out.file = paste0(tmp.dir,"/",sample.id,"_guppyplex_fastq_pass.fastq")
# Read filtering
system(sprintf("zsh -i genome_assembly.sh %s %s %s %d %s",
sample.id,
sample.dirs[i],
assembly.dir,
num.threads,
medaka.model))
# system(sprintf("artic guppyplex --min-length 350 --max-length 700 --prefix %s --directory %s --output %s",
#                sample.id,
#                paste0(input.dir,"/",sample.id),
#                tmp.out.file))
# # genome assembly
# tmp.dir = paste0(assembly.dir,"/",sample.id)
# system(sprintf("mkdir -p %s", tmp.dir))
# system(sprintf("artic minion --normalise 200 --threads %d --scheme-directory $ARTIC_DIR/artic-ncov2019/primer_schemes --read-file %s --medaka nCoV-2019/V3 %s",
#                num.threads,
#                tmp.out.file,
#                paste0(tmp.dir,"/",sample.id)))
}
parallel::stopCluster(cl = cl)
system(sprintf("./merge_fasta.sh %s %s",
assembly.dir,
consensus.fasta.dir))
library(R.utils)
merged.fasta="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/gambia_burkina.fasta"
output.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/clade_assignment"
if(!file.exists(merged.fasta)){
stop(merged.fasta," not found!")
}
system(sprintf("mkdir -p %s",output.dir))
cat("\nPerforming clade assignment with nextclade\n")
nextclade.dir = paste0(output.dir,"/nextclade")
system(sprintf("mkdir -p %s",nextclade.dir))
ref.data.dir = paste0(nextclade.dir,"/ref_data")
system(sprintf("mkdir -p %s",ref.data.dir))
ref.covid.data.dir = paste0(ref.data.dir,"/sars-cov-2")
system(sprintf("mkdir -p %s",ref.covid.data.dir))
system(sprintf("run_nextclade.sh %s %s %s",
ref.covid.data.dir,
output.dir,
merged.fasta))
getwd()
if(!file.exists(merged.fasta)){
stop(merged.fasta," not found!")
}
system(sprintf("mkdir -p %s",output.dir))
cat("\nPerforming clade assignment with nextclade\n")
nextclade.dir = paste0(output.dir,"/nextclade")
system(sprintf("mkdir -p %s",nextclade.dir))
ref.data.dir = paste0(nextclade.dir,"/ref_data")
system(sprintf("mkdir -p %s",ref.data.dir))
ref.covid.data.dir = paste0(ref.data.dir,"/sars-cov-2")
system(sprintf("mkdir -p %s",ref.covid.data.dir))
system(sprintf("run_nextclade.sh %s %s %s",
ref.covid.data.dir,
output.dir,
merged.fasta))
cat("\nPerforming clade assignment with nextclade\n")
nextclade.dir = paste0(output.dir,"/nextclade")
system(sprintf("mkdir -p %s",nextclade.dir))
ref.data.dir = paste0(nextclade.dir,"/ref_data")
system(sprintf("mkdir -p %s",ref.data.dir))
ref.covid.data.dir = paste0(ref.data.dir,"/sars-cov-2")
system(sprintf("mkdir -p %s",ref.covid.data.dir))
system(sprintf("./run_nextclade.sh %s %s %s",
ref.covid.data.dir,
output.dir,
merged.fasta))
cat("\nPerforming clade assignment with pangolin\n")
pangolin.dir = paste0(output.dir,"/pangolin")
system(sprintf("mkdir -p %s",pangolin.dir))
system(sprintf("./run_pangolin.sh %s %s",
merged.fasta,
pangolin.dir))
system(sprintf("zsh -i run_pangolin.sh %s %s",
merged.fasta,
pangolin.dir))
require("rio")
require("data.table")
require("dplyr")
require("kableExtra")
require("Biostrings")
require("stringr")
require("ggplot2")
gambia.burkina.nextclade = "/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/clade_assignment/nextclade/nextclade.tsv"
gambia.burkina.pangolin = "/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/clade_assignment/pangolin/lineage_report.csv"
nextclade.data = fread(gambia.burkina.nextclade)
pangolin.data = fread(gambia.burkina.pangolin)
nextclade.data = nextclade.data %>% dplyr::select(c(seqName, clade, Nextclade_pango, clade_who, qc.overallStatus))
head(nextclade.data)
removeSuffix = function(x){gsub("/ARTIC/medaka MN908947.3", "", x)}
gambia.covid$seqName = as.character(lapply(gambia.covid$seqName, removeSuffix))
removeSuffix = function(x){gsub("/ARTIC/medaka MN908947.3", "", x)}
nextclade.data$seqName = as.character(lapply(nextclade.data$seqName, removeSuffix))
head(nextclade.data)
removePrefix = function(x){gsub("barcode", "", x)}
nextclade.data$seqName = as.character(lapply(nextclade.data$seqName, removePrefix))
head(nextclade.data)
head(pangolin.data)
tail(head(nextclade.data))
tail(nextclade.data)
View(nextclade.data)
60-16
screening.id = nextclade.data %>% dplyr::filter(grepl("hCoV-19",nextclade.data$seqName)==TRUE)
screening.id
screening.id = nextclade.data %>% dplyr::filter(grepl("hCoV-19",nextclade.data$seqName)==TRUE) %>% dplyr::select(seqName)
screening.id
write.table(screening.id, "/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/screening_id.txt", sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE)
writexl::write_xlsx(screening.id, "/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/screening_id.xlsx", sep = "\t")
writexl::write_xlsx(screening.id, "/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/screening_id.xlsx")
install.packages("lubridate")
require("scales")
install.packages("Cairo")
require("rio")
require("data.table")
require("dplyr")
require("kableExtra")
require("Biostrings")
require("stringr")
require("ggplot2")
require("lubridate")
require("scales")
require("Cairo")
install.packages("Cairo")
require("Cairo")
remove.packages("Cairo")
install.packages("Cairo")
