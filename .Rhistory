mutate(clade = factor(clade, levels=rev(unique(clade)), ordered=TRUE))
gambian.data.long
kable(clade.period, "html") %>% kable_styling("striped") %>% scroll_box(width = "95%")
clade.period.burkina = burkina.nextclade.data %>%
# group by clade
group_by(clade) %>%
# transform to date format with lubridate
mutate(collection_date = ymd(collection_date)) %>%
# find min and max
summarise(start = min(collection_date),
end = max(collection_date))
clade.period.burkina
burkina.data.long = clade.period.burkina %>%
mutate(start = ymd(start),
end = ymd(end)) %>%
gather(date.type, collection_date, -c(clade)) %>%
arrange(date.type, clade) %>%
mutate(clade = factor(clade, levels=rev(unique(clade)), ordered=TRUE))
burkina.data.long$country="Burkina"
gambian.data.long$country="Gambia"
data.long.all = rbind(burkina.data.long, gambian.data.long)
data.long.all$country=factor(data.long.all$country)
ggplot(data.long.all, aes(x=clade, y=collection_date)) +  #, group=clade
geom_line(aes(color = country), position = position_dodge(0.3), size=6) +
geom_vline(xintercept=x.breaks, colour="grey80", linetype="dotted") +
guides(colour=guide_legend(title=NULL)) +
labs(x=NULL, y=NULL) + coord_flip() +
scale_y_date(date_breaks="1 month", labels=date_format("%b ‘%y")) +    #2 weeks
theme_gantt() + theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_color_manual(values=c('steelblue','#E69F00'))
ggplot(data.long.all, aes(x=clade, y=collection_date)) +  #, group=clade
geom_line(aes(color = country), position = position_dodge(0.3), linewidth=6) +
geom_vline(xintercept=x.breaks, colour="grey80", linetype="dotted") +
guides(colour=guide_legend(title=NULL)) +
labs(x=NULL, y=NULL) + coord_flip() +
scale_y_date(date_breaks="1 month", labels=date_format("%b ‘%y")) +    #2 weeks
theme_gantt() + theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_color_manual(values=c('steelblue','#E69F00'))
?geom_line
data.long.all
ggplot(data.long.all, aes(x=clade, y=collection_date)) +  #, group=clade
geom_line(aes(color = country), position = position_dodge(0.3), linewidth=6)
theme_gantt <- function(base_size=11, base_family="serif") {
ret <- theme_bw(base_size, base_family) %+replace%
theme(panel.background = element_rect(fill="#ffffff", colour=NA),
axis.title.x=element_text(vjust=-0.2), axis.title.y=element_text(vjust=1.5),
title=element_text(vjust=1.2, family="serif"),
panel.border = element_blank(), axis.line=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size=0.5, colour="grey80"),
axis.ticks=element_blank(),
legend.position="bottom",
axis.title=element_text(size=rel(0.8), family="serif"),
strip.text=element_text(size=rel(1), family="serif"),
strip.background=element_rect(fill="#ffffff", colour=NA),
panel.spacing.y=unit(1.5, "lines"),
legend.key = element_blank())
ret
}
ggplot(data.long.all, aes(x=clade, y=collection_date)) +  #, group=clade
geom_line(aes(color = country), position = position_dodge(0.3), linewidth=6) +
geom_vline(xintercept=x.breaks, colour="grey80", linetype="dotted") +
guides(colour=guide_legend(title=NULL)) +
labs(x=NULL, y=NULL) + coord_flip() +
scale_y_date(date_breaks="1 month", labels=date_format("%b ‘%y")) +    #2 weeks
theme_gantt() + theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_color_manual(values=c('steelblue','#E69F00'))
ggplot(data=clade.df, aes(x=clade, y=Freq)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=round(Freq,3)), vjust=1.6, color="white", size=3.5)+
theme_minimal() + ggtitle("A") + xlab("") +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_y_continuous(breaks = seq(0, 0.5, by = 0.1))
ggplot(data=clade.df, aes(x=clade, y=Freq)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=round(Freq,3)), vjust=1.6, color="white", size=3.5)+
theme_minimal() + ggtitle("A") +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_y_continuous(breaks = seq(0, 0.5, by = 0.1)) + xlab("")
ggplot(data=clade.df, aes(x=clade, y=Freq)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=round(Freq,3)), vjust=1.6, color="white", size=3.5)+
theme_minimal() + ggtitle("A") +
theme(axis.text.x=element_blank()) +  #text(angle=45, hjust=1)
scale_y_continuous(breaks = seq(0, 0.5, by = 0.1)) + xlab("")
ggplot(data=clade.df.country, aes(x=clade, y=Freq, fill=country)) +
geom_bar(stat="identity", color="black", position=position_dodge())+
theme_minimal() + scale_y_continuous(breaks = seq(0, 0.5, by = 0.1)) +
scale_fill_manual(values=c("steelblue","#E69F00")) + ggtitle("B") + ylab("") + xlab("") +
theme(axis.text.x=element_blank())
install.packages("checkmate")
install.packages("magrittr")
install.packages("odbc")
install.packages("R.utils")
install.packages("writexl")
install.packages("readr")
install.packages("data.table")
install.packages("tidyverse")
install.packages("REDCapR")
install.packages("rio")
install.packages("doParallel")
install.packages("httr2")
install.packages("httr")
install.packages("covr")
install.packages("testthat")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("devtools")
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
devtools::build_readme()
parallel::detectCores()-1
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
install.packages("odbc")
library(odbc)
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
odbc::odbcListDrivers()
credentials.file = system.file("extdata", "test.ini", package = "readepi")
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
library(readepi)
library(readepi)
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
odbc::odbcListDrivers()
odbc::odbcListDrivers()
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
library(readepi)
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
library(readepi)
library(odbc)
odbc::odbcListDrivers()
?odbc::odbcListDrivers
remove.packages("odbc")
install.packages("odbc")
install.packages("odbc")
PKG_CFLAGS
odbc::odbcListDrivers()
odbc::odbcListDrivers()
remove.packages("odbc")
install.packages("odbc")
install.packages("odbc")
odbc::odbcListDrivers()
devtools::install_github("r-dbi/odbc")
odbc::odbcListDrivers()
library(odbc)
odbcListDrivers()
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 18 for SQL Server")
remove.packages("readepi")
library(readepi)
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 18 for SQL Server")
odbcListDrivers()
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 18 for SQL Server")
library(readepi)
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
devtools::install_github("r-dbi/odbc")
devtools::install_github("r-dbi/odbc", force = TRUE)
library(odbc)
odbcListDrivers()
showTables(credentials.file=system.file("extdata", "test.ini", package = "readepi"), project.id="IBS_BHDSS", driver.name="ODBC Driver 17 for SQL Server")
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events")
credentials.file = system.file("extdata", "test.ini", package = "readepi")
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events")
show_example_file()
remove.packages("readepi")
library(readepi)
show_example_file()
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events")
table.names = "accounts,account_books,account_currencies" #can also be table.names = c("account"s,"account_books","account_currencies")
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = table.names)
credentials.file = system.file("extdata", "test.ini", package = "readepi")
table.names = "accounts,account_books,account_currencies" #can also be table.names = c("account"s,"account_books","account_currencies")
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = table.names)
credentials.file
credentials = readMSsqlCredentials(credentials.file)
credentials = readCredentials(credentials.file, project.id="IBS_BHDSS")
credentials
res = read_from_ms_sql_server(user=credentials$user, password=credentials$pwd, host=credentials$host, port=credentials$port,
database.name=credentials$project, table.names=table.name, driver.name=driver.name, records=records,
fields=fields)
res = read_from_ms_sql_server(user=credentials$user, password=credentials$pwd, host=credentials$host, port=credentials$port,
database.name=credentials$project, table.names=table.name, driver.name=driver.name, records=records,
fields=fields)
driver.name="ODBC Driver 17 for SQL Server"
res = read_from_ms_sql_server(user=credentials$user, password=credentials$pwd, host=credentials$host, port=credentials$port,
database.name=credentials$project, table.names=table.name, driver.name=driver.name, records=records,
fields=fields)
table.name = "accounts,account_books,account_currencies"
res = read_from_ms_sql_server(user=credentials$user, password=credentials$pwd, host=credentials$host, port=credentials$port,
database.name=credentials$project, table.names=table.name, driver.name=driver.name, records=records,
fields=fields)
fields=NULL; records=NULL
res = read_from_ms_sql_server(user=credentials$user, password=credentials$pwd, host=credentials$host, port=credentials$port,
database.name=credentials$project, table.names=table.name, driver.name=driver.name, records=records,
fields=fields)
credentials
credentials$pwd
table.name = "accounts,account_books"
res = read_from_ms_sql_server(user=credentials$user, password=credentials$pwd, host=credentials$host, port=credentials$port,
database.name=credentials$project, table.names=table.name, driver.name=driver.name, records=records,
fields=fields)
con = DBI::dbConnect(odbc::odbc(),
driver = driver.name,
server = host,
database = database.name,
uid = user,
pwd = password,
port = as.numeric(port))
driver="ODBC Driver 17 for SQL Server"
server = credentials$host
database=credentials$project
uid =credentials$user
pwd =credentials$pwd
port = as.numeric(credentials$port))
port = as.numeric(credentials$port)
con = DBI::dbConnect(odbc::odbc(),
driver = driver.name,
server = host,
database = database.name,
uid = user,
pwd = password,
port = as.numeric(port))
server
host=server
database.name=database
user=uid
password=pwd
con = DBI::dbConnect(odbc::odbc(),
driver = driver.name,
server = host,
database = database.name,
uid = user,
pwd = password,
port = as.numeric(port))
tables = DBI::dbListTables(conn = con)
table.names = "accounts,account_books,account_currencies" #can also be table.names = c("account"s,"account_books","account_currencies")
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = table.names)
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events")
devtools::build_readme()
devtools::load_all(".")
library(readepi)
data = readepi(credentials.file, project.id="IBS_BHDSS", driver.name = "ODBC Driver 17 for SQL Server", table.name = "dss_events")
head(data$dss_events)
class(data$dss_events)
#' @examples data = subsetFields(data.frame=data$dss_events, fields="id,data_entry_date", table.name="dss_events")
#' @examples data = subsetRecords(data.frame, records, id.position=1, table.name)
data.frame=data$dss_events
fields = "id,data_entry_date start_date,status"
records = "1,2,3,5,8"
id.position=1
not.found = 0
records = as.character(unlist(strsplit(records, ",")))
id.column.name = names(data.frame)[id.position]
id.column.name
is.numeric(data.frame[[id.column.name]])
records="1,2,3,5,8"
records
not.found = 0
records = as.character(unlist(strsplit(records, ",")))
id.column.name = names(data.frame)[id.position]
if(is.numeric(data.frame[[id.column.name]])){
records = as.numeric(records)
}
records
idx = which(records %in% data.frame[[id.column.name]])
idx
idx = match(records, data.frame[[id.column.name]])
idx
idx=c(idx,NA,NA)
idx = idx[!is.na(idx)]
idx
m=c(idx,NA,NA)
which(is.na(m))
m = match(records, data.frame[[id.column.name]])
idx = m[!is.na(m)]
records = records[idx]
data = data.frame %>% dplyr::filter(data.frame[[id.column.name]] %in% records)
records = records[idx]
data = data.frame[which(data.frame[[id.column.name]] %in% records),]
records
library(readepi)
data = data.frame[1:50,1:5]
library(data.table)
fwrite(data,"/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/test_subset.txt", col.names = TRUE, row.names = TRUE, quote = FALSE, sep = "\t")
library(readepi)
devtools::install_github(repo = "https://github.com/pepfar-datim/datimutils.git", ref = "master")
styler::style_pkg()
install.packages("styler")
styler::style_pkg()
??%dopar%
?%dopar%
??dopar
library(readepi)
library(readepi)
devtools::build_readme()
devtools::build_vignettes()
use_testthat()
devtools::use_testthat()
?use_testthat
usethis::use_testthat()
usethis::use_test("read_stuff")
library(covr)
package_coverage()
devtools::load_all()
test_check("readepi")
test_check("readepi")
usethis::use_testthat(3)
devtools::test_coverage_active_file(
)
input.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/Gam_10", assembly.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/Gam10_assembly", consensus.fasta.dir="/Users/karimmane/Documents/Karim/LSHTM/TRACE_dev/Genomic_data/Gam10_consensus", num.samples=5, device="MinION", partition=NULL
devtools::load_all(".")
usethis::use_testthat()
use_test()
library(testthat)
use_test()
library(usethis)
use_test()
library(readepi)
library(devtools)
build_readme()
use_testthat()
use_test("read_stuff")
load_all()
rename_files("strsplit1", "str_split_one")
rename_files("read_stuff", "readepi")
library(rio)
install.packages("rio")
install.packages("rio", dependencies = TRUE)
library(rio)
?rio::import
is.character(" ")
file <- system.file("extdata", "test.json", package = "readepi")
data <- readepi(file.path = file)
library(readepi)
file <- system.file("extdata", "test.json", package = "readepi")
data <- readepi(file.path = file)
class(data)
length(data)
load_all()
library(devtools)
load_all()
data = read_from_file(file.path=system.file("extdata", "*.txt", package = "readepi"))
dir.exists("inst/extdata")
data = read_from_file(file.path="inst/extdata",pattern = "txt")
dir.exists(file.path=paste0(getwd(), "/inst/extdata")
)
dir.exists(paste0(getwd(), "/inst/extdata"))
file.path = system.file("extdata", "test.txt", package = "readepi")
dir.exists(file.path)
data <- read_from_file(file.path=system.file("extdata", "test.txt", package = "readepi"),
sep = "\t"
)
sep = "\t"
file.path=system.file("extdata", "test.txt", package = "readepi")
file.path
data <- data.table::fread(file.path, sep = sep)
is.null(sep)
data <- read_from_file(file.path=system.file("extdata", "test.txt", package = "readepi"),
sep = "\t")
rm(list = ls())
data <- read_from_file(file.path=system.file("extdata", "test.txt", package = "readepi"),
sep = "\t")
file.path=system.file("extdata", "test.txt", package = "readepi")
dir.exists(file.path) & length(list.files(file.path)) > 0
devtools::load_all()
data <- read_from_file(file.path=system.file("extdata", "test.txt", package = "readepi"),
sep = "\t")
data <- read_from_file(file.path=system.file("extdata", "test.xlsx", package = "readepi"),
which = "Sheet2")
data <- read_from_file(file.path=system.file("extdata", "test.txt", package = "readepi"),
format = "\t")
data <- read_from_file(file.path=system.file("extdata", "test.txt", package = "readepi"),
sep = "\t")
devtools::load_all(".")
file.path
dir.exists(file.path)
file.exists(file.path)
is.null(sep)
sep="\t"
is.null(sep)
data <- data.table::fread(file.path, sep = sep)
class(data)
library(readepi)
data = read_from_file(file.path="/inst/extdata",
pattern = "txt")
data = read_from_file(file.path=system.file("/inst/extdata/"),
pattern = "txt")
file.path=system.file("/inst/extdata/")
file.path
file.path=system.file("/inst/extdata")
file.path
?system.file
file.path=system.file("/inst/extdata", package = "readepi")
file.path
file.path=system.file("/inst/extdata/", package = "readepi")
file.path
file.path=system.file("extdata", package = "readepi")
file.path
data = read_from_file(file.path=system.file("extdata", package = "readepi"),
pattern = "txt")
data = read_from_file(file.path=system.file("extdata", package = "readepi"),
pattern = "txt")
covr::package_coverage()
res <- read_from_redcap(uri = "https://redcap.mrc.gm:8443/redcap/api/",
token = "9D71857D60F4016AB7BFFDA65970D737",
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position = 1,
records = NULL,
fields = NULL)
head(res$data)
class(res$data)
dim(res$data)
head(res$data[,1:5])
res <- read_from_redcap(uri = "https://redcap.mrc.gm:8443/redcap/api/",
token = "9D71857D60F4016AB7BFFDA65970D737",
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position = 1,
records = c("day_1_q_ran_id","redcap_event_name","day_1_q_1a"),
fields = NULL
)
res <- read_from_redcap(uri = "https://redcap.mrc.gm:8443/redcap/api/",
token = "9D71857D60F4016AB7BFFDA65970D737",
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position = 1,
records = c("day_1_q_ran_id","redcap_event_name","day_1_q_1a"),
fields = NULL
)
res <- read_from_redcap(uri = "https://redcap.mrc.gm:8443/redcap/api/",
token = "9D71857D60F4016AB7BFFDA65970D737",
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position = 1,
fields = c("day_1_q_ran_id","redcap_event_name","day_1_q_1a"),
records = NULL
)
res <- read_from_redcap(uri = "https://redcap.mrc.gm:8443/redcap/api/",
token = "9D71857D60F4016AB7BFFDA65970D737",
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position = 1,
fields = c("day_1_q_ran_id","redcap_event_name","day_1_q_1a"),
records = c("C10001/3", "C10002/1", "C10003/7")
)
dim(res$data)
res <- read_from_redcap(uri = "https://redcap.mrc.gm:8443/redcap/api/",
token = "9D71857D60F4016AB7BFFDA65970D737",
project.id = "Pats__Covid_19_Cohort_1_Screening",
id.position = 1,
fields = "day_1_q_ran_id,redcap_event_name,day_1_q_1a",
records = NULL
)
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
res <- read_from_ms_sql_server(user="kmane",
password="Dakabantang@KD23",
host="robin.mrc.gm",
port=1433,
database.name="IBS_BHDSS",
driver.name="ODBC Driver 17 for SQL Server",
table.names="dss_events",
records = NULL,
fields = NULL,
id.position = 1
)
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
?checkmate::assert_numbe
install.packages("checkmate")
?checkmate::assert_number
id.position = '1'
checkmate::assert_number(id.position, lower = 1)
id.position = 1
checkmate::assert_number(id.position, lower = 1)
covr::package_coverage()
token = "9D71857D60F4016AB7BFFDA65970D737"
class(token)
nchar(token)
?assert_character
covr::package_coverage()
testVector(letters, min.len = 1L, any.missing = FALSE)
??testVector
library(checkmate)
testVector(letters, min.len = 1L, any.missing = FALSE)
testVector(c('a','b','c'), min.len = 1L, any.missing = FALSE)
?testCharacter
?testCharacter
covr::package_coverage()
covr::package_coverage()
?assert_directory
?test_file_exists
covr::package_coverage()
covr::package_coverage()
covr::package_coverage()
?checkmate::assert_vector
covr::package_coverage()
covr::package_coverage()
?checkmate::assert_file_exists
covr::package_coverage()
