id_column_name, field,
dbms, id_pos)
id_col_name
id_column_name <- get_id_column_name(id_col_name, j, id_position)[[1]]
all(!is.null(id_col_name) & !is.na(id_col_name))
id_col_name[j]
id_column_name <- ifelse(all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1),
id_col_name[j], id_col_name)
id_column_name
j
id_col_name[j]
all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1)
id_col_name
id_column_name <- ifelse(all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1),
id_col_name[j], id_col_name)
id_column_name
id_col_name
all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1)
id_col_name
id_column_name=NULL
id_column_name <- ifelse(all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1),
id_col_name[j], id_col_name)
id_col_name[j]
id_column_name <- ifelse(
all(grepl(",", id_col_name, fixed = TRUE) == TRUE & length(id_col_name) > 1),
id_col_name[j],
id_col_name
)
id_column_name
length(id_col_name) > 1
grepl(",", id_col_name, fixed = TRUE) == TRUE
if (all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1)) {
id_column_name = id_col_name
} else {
id_column_name = id_col_name[j]
}
id_col_name
id_column_name = id_col_name
author_id
id_column_name
if (all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1)) {
id_column_name <- id_col_name
} else {
id_column_name <- id_col_name[j]
}
all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1)
id_col_name
id_col_name=NULL
if (all(grepl(",", id_col_name, fixed = TRUE) == TRUE &
length(id_col_name) > 1)) {
id_column_name <- id_col_name[j]
} else {
id_column_name <- id_col_name
}
id_column_name <- ifelse(all(!is.null(id_column_name) &
!is.na(id_column_name)),
id_column_name[j],
NULL)
id_col_name=c("author_id", "rfam_acc")
id_col_name = gsub(" ", "", id_col_name)
id_col_name = unlist(strsplit(id_col_name, ","))
id_col_name
devtools::load_all(".")
id_column_name <- get_id_column_name(id_col_name, j, id_position)[[1]]
id_pos <- get_id_column_name(id_col_name, j, id_position)[[2]]
id_pos
id_position
devtools::load_all(".")
id_column_name <- get_id_column_name(id_col_name, j, id_position)[[1]]
id_column_name
id_pos <- get_id_column_name(id_col_name, j, id_position)[[2]]
id_pos
devtools::load_all(".")
id_pos <- get_id_column_name(id_col_name, j, id_position)[[2]]
result[[table]] <- sql_select_records_and_fields(table, record, con,
id_column_name, field,
dbms, id_pos)
con = DBI::dbConnect(RMySQL::MySQL(),
driver = "",
host = "mysql-rfam-public.ebi.ac.uk",
dbname = "Rfam",
user = "rfamro",
password = "",
port = 4497
)
result[[table]] <- sql_select_records_and_fields(table, record, con,
id_column_name, field,
dbms, id_pos)
result$family_author
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names,
records = records,
fields = fields,
id_col_name = c("author_id", "rfam_acc")
)
data$family_author
data$author
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source="select author.author_id, author.name, family_author.author_id from author left join family_author on author.author_id = family_author.author_id"
)
source="select author.author_id, author.name, family_author.author_id from author left join family_author on author.author_id = family_author.author_id"
from_query <- fetch_data_from_query(source, dbms, tables,
driver_name, host, database_name,
user, password, port)
dim(from_query$author_family_author)
devtools::load_all(".")
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source="select author.author_id, author.name, family_author.author_id from author left join family_author on author.author_id = family_author.author_id"
)
table_names <- source[which(source %in% tables)]
source <- source[!(which(source %in% tables))]
tables
devtools::load_all(".")
idx <- which(source %in% tables)
length(idx)
devtools::load_all(".")
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source="select author.author_id, author.name, family_author.author_id from author left join family_author on author.author_id = family_author.author_id"
)
dim(data$author_family_author)
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source="select * from author"
)
dim(data$author)
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source="select auhtor_id, name, last_name from author"
)
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source="select author_id, name, last_name from author"
)
dim(data)
dim(data$author)
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source="select * from author where author_id in ('1','20','50')"
)
dim(data$author)
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source="select author_id, name, last_name from author where author_id in ('1','20','50')"
)
head(data$author)
dbms
devtools::load_all(".")
devtools::build_vignettes()
devtools::load_all(".")
devtools::build_readme()
devtools::load_all(".")
con <- connect_to_server(
dbms = "MySQL",
driver_name = "",
host = "mysql-rfam-public.ebi.ac.uk",
database_name = "Rfam",
user = "rfamro",
password = "",
port = 4497
)
class(con)
driver_name = ""
length(driver_name)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
covr::package_coverage()
usethis::use_r("read_from_ms_sql_server-helpers")
devtools::load_all(".")
usethis::use_test("read_from_ms_sql_server-helpers")
covr::package_coverage()
covr::package_coverage()
devtools::load_all(".")
covr::package_coverage()
covr::package_coverage()
devtools::load_all(".")
devtools::load_all(".")
covr::package_coverage()
devtools::load_all(".")
covr::package_coverage()
data <- readepi(
credentials_file = credentials_file,
project_id = "DHIS2_DEMO",
dataset = "pBOMPrpg1QX",
organisation_unit = "DiszpKrYNg8",
data_element_group = NULL,
start_date = "2014",
end_date = "2023"
)
head(data$data)
data <- readepi(
credentials_file = credentials_file,
project_id = "DHIS2_DEMO",
dataset = "pBOMPrpg1QX,BfMAe6Itzgt",
organisation_unit = "DiszpKrYNg8",
data_element_group = NULL,
start_date = "2014",
end_date = "2023",
fields = c("dataElement","period","value")
)
head(data$data)
devtools::load_all(".")
data = readepi(
credentials_file = system.file("extdata", "test.ini", package = "readepi")
,project_id = "DHIS2_DEMO",
dataset = "pBOMPrpg1QX,BfMAe6Itzgt",
organisation_unit = "DiszpKrYNg8",
data_element_group = NULL,
start_date = "2014",
end_date = "2023"
)$data
dim(data)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?REDCapR::redcap_read
devtools::load_all(".")
covr::package_coverage()
?usethis::rename_files
usethis::rename_files("tmp_read_servers.R", "read_servers.R")
devtools::load_all(".")
usethis::use_test("read_servers")
devtools::load_all(".")
devtools::load_all(".")
dbms
table_names <- "author,family_author"
fields <- c(
"author_id,name,last_name,initials",
"rfam_acc,author_id"
)
# the first string in the field vector corresponds to the name of the
# columns of interest from the first table specified in the `table_names`
# argument and so on...
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names,
fields = fields
)
credentials_file <- system.file("extdata", "test.ini", package = "readepi")
table_names <- "author,family_author"
fields <- c(
"author_id,name,last_name,initials",
"rfam_acc,author_id"
)
# the first string in the field vector corresponds to the name of the
# columns of interest from the first table specified in the `table_names`
# argument and so on...
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names,
fields = fields
)
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "", # ODBC Driver 17 for SQL Server
source = "author"
)
fields <- "author_id,name,last_name,initials"
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = "author",
fields = fields
)
records <- "1, 34, 15, 70, 118, 20"
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = "author",
records = records,
id_position = 1
)
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = "author",
records = records,
fields = fields,
id_col_name = "author_id"
)
table_names <- "author,family_author"
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names
)
source="author,family_author"
tables=c("author","family_author")
which(source %in% tables)
class(source)
is.vector(source)
table_names <- c("author", "family_author")
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names
)
fields <- c(
"author_id,name,last_name,initials",
"rfam_acc,author_id"
)
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names,
fields = fields
)
records <- c(
"1, 34, 15, 70, 118, 20",
"RF00591,RF01420,RF01421"
)
data <- readepi(credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names,
records = records,
id_position = c(1, 1)
)
data <- readepi(
credentials_file,
project_id = "Rfam",
driver_name = "",
source = table_names,
records = records,
fields = fields,
id_col_name = c("author_id", "rfam_acc")
)
devtools::load_all(".")
covr::package_coverage()
sep <- detect_separator(
x = "My name is Karim"
)
sep
devtools::load_all(".")
devtools::load_all(".")
covr::package_coverage()
file_path = system.file("extdata", package = "readepi")
pattern = c(".txt", ".csv")
length(list.files(file_path, full.names = TRUE,
recursive = FALSE))
files <- list.files(file_path,
full.names = TRUE, pattern = pat,
recursive = FALSE
)
pat=pattern[1]
files <- list.files(file_path,
full.names = TRUE, pattern = pat,
recursive = FALSE
)
files
dirs <- list.dirs(file_path, full.names = TRUE, recursive = FALSE)
dirs
file_path
idx <- which(files %in% dirs)
rio_extensions <- c(
"csv", "psv", "tsv", "csvy", "sas7bdat", "sav", "zsav", "dta", "xpt",
"por", "xls", "R", "RData", "rda", "rds", "rec", "mtp", "syd", "dbf",
"arff", "dif", "no recognized extension", "fwf", "csv.gz", "parquet",
"wf1", "feather", "fst", "json", "mat", "ods", "html", "xml", "yml"
)
# getting files extensions and basenames
files_extensions <- as.character(lapply(files, get_extension))
files_extensions
files_base_names <- as.character(lapply(files, get_base_name))
files_base_names
pat=pattern[2]
files <- list.files(file_path,
full.names = TRUE, pattern = pat,
recursive = FALSE
)
# getting files extensions and basenames
files_extensions <- as.character(lapply(files, get_extension))
files_extensions
files
pat
pattern
result <- NULL
for (pat in pattern) {
files <- list.files(file_path,
full.names = TRUE, pattern = pat,
recursive = FALSE
)
dirs <- list.dirs(file_path, full.names = TRUE, recursive = FALSE)
res <- read_multiple_files(files, dirs)
result <- c(result, res)
}
devtools::load_all(".")
for (pat in pattern) {
files <- list.files(file_path,
full.names = TRUE, pattern = pat,
recursive = FALSE
)
dirs <- list.dirs(file_path, full.names = TRUE, recursive = FALSE)
res <- read_multiple_files(files, dirs)
result <- c(result, res)
}
result <- NULL
for (pat in pattern) {
files <- list.files(file_path,
full.names = TRUE, pattern = pat,
recursive = FALSE
)
dirs <- list.dirs(file_path, full.names = TRUE, recursive = FALSE)
res <- read_multiple_files(files, dirs)
result <- c(result, res)
}
devtools::load_all(".")
covr::package_coverage()
lintr::lint_package()
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
record=(1,NA,2)
record=c(1,NA,2)
anyNA(record)
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
source = "select author.author_id, author.name, family_author.author_id from
author left join family_author on author.author_id = family_author.author_id"
print(source)
devtools::load_all(".")
lintr::lint_package()
devtools::load_all(".")
lintr::lint_package()
covr::package_coverage()
devtools::load_all(".")
devtools::load_all(".")
covr::package_coverage()
devtools::load_all(".")
devtools::load_all(".")
covr::package_coverage()
devtools::load_all(".")
usethis::use_tidy_description()
devtools::load_all(".")
covr::package_coverage()
devtools::load_all(".")
devtools::load_all(".")
result <- read_rio_formats(
files_extensions = ".txt",
rio_extensions = c("txt", "xlxs"),
files = system.file("extdata", "test.txt", package = "readepi"),
files_base_names = "test"
)
result <- detect_separator(
x = "My name is Karim"
)
result <- get_base_name(
x = system.file("extdata", "test.txt", package = "readepi")
)
result <- get_extension(
file_path = system.file("extdata", "test.txt", package = "readepi")
)
devtools::load_all(".")
devtools::load_all(".")
result <- read_rio_formats(
files_extensions = ".txt",
rio_extensions = c("txt", "xlxs"),
files = system.file("extdata", "test.txt", package = "readepi"),
files_base_names = "test"
)
class(result)
covr::package_coverage()
